/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.hclscope.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.hclscope.services.HclScopeGrammarAccess;

@SuppressWarnings("all")
public class HclScopeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected HclScopeGrammarAccess grammarAccess;
	protected AbstractElementAlias match_State___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_11__q;
	protected AbstractElementAlias match_TransitionBody_CommaKeyword_4_0_a;
	protected AbstractElementAlias match_TransitionBody_CommaKeyword_4_0_p;
	protected AbstractElementAlias match_TransitionBody___OnKeyword_1_0_AsteriskKeyword_1_1_3__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (HclScopeGrammarAccess) access;
		match_State___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_11__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_1_11()));
		match_TransitionBody_CommaKeyword_4_0_a = new TokenAlias(true, true, grammarAccess.getTransitionBodyAccess().getCommaKeyword_4_0());
		match_TransitionBody_CommaKeyword_4_0_p = new TokenAlias(true, false, grammarAccess.getTransitionBodyAccess().getCommaKeyword_4_0());
		match_TransitionBody___OnKeyword_1_0_AsteriskKeyword_1_1_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTransitionBodyAccess().getOnKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getTransitionBodyAccess().getAsteriskKeyword_1_1_3()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_State___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_11__q.equals(syntax))
				emit_State___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_11__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TransitionBody_CommaKeyword_4_0_a.equals(syntax))
				emit_TransitionBody_CommaKeyword_4_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TransitionBody_CommaKeyword_4_0_p.equals(syntax))
				emit_TransitionBody_CommaKeyword_4_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TransitionBody___OnKeyword_1_0_AsteriskKeyword_1_1_3__q.equals(syntax))
				emit_TransitionBody___OnKeyword_1_0_AsteriskKeyword_1_1_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_State___LeftCurlyBracketKeyword_1_0_RightCurlyBracketKeyword_1_11__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('on' '*')? (ambiguity) (rule start)
	 *     methodparameter+=MethodParameterTrigger (ambiguity) (rule end)
	 *     methodparameter+=MethodParameterTrigger (ambiguity) transitionguard=TransitionGuard
	 *     methodparameter+=MethodParameterTrigger (ambiguity) transitionoperation=TransitionOperation
	 *     portevent+=PortEventTrigger (ambiguity) (rule end)
	 *     portevent+=PortEventTrigger (ambiguity) transitionguard=TransitionGuard
	 *     portevent+=PortEventTrigger (ambiguity) transitionoperation=TransitionOperation
	 *     transitionguard=TransitionGuard (ambiguity) (rule end)
	 *     transitionguard=TransitionGuard (ambiguity) transitionoperation=TransitionOperation
	 *     transitionoperation=TransitionOperation (ambiguity) (rule end)
	 *     trigger+=Trigger (ambiguity) (rule end)
	 *     trigger+=Trigger (ambiguity) transitionguard=TransitionGuard
	 *     trigger+=Trigger (ambiguity) transitionoperation=TransitionOperation
	 */
	protected void emit_TransitionBody_CommaKeyword_4_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('on' '*')? (ambiguity) methodparameter+=MethodParameterTrigger
	 *     (rule start) ('on' '*')? (ambiguity) portevent+=PortEventTrigger
	 *     (rule start) ('on' '*')? (ambiguity) transitionguard=TransitionGuard
	 *     (rule start) ('on' '*')? (ambiguity) transitionoperation=TransitionOperation
	 *     (rule start) ('on' '*')? (ambiguity) trigger+=Trigger
	 *     methodparameter+=MethodParameterTrigger (ambiguity) methodparameter+=MethodParameterTrigger
	 *     methodparameter+=MethodParameterTrigger (ambiguity) portevent+=PortEventTrigger
	 *     methodparameter+=MethodParameterTrigger (ambiguity) transitionguard=TransitionGuard
	 *     methodparameter+=MethodParameterTrigger (ambiguity) transitionoperation=TransitionOperation
	 *     methodparameter+=MethodParameterTrigger (ambiguity) trigger+=Trigger
	 *     portevent+=PortEventTrigger (ambiguity) methodparameter+=MethodParameterTrigger
	 *     portevent+=PortEventTrigger (ambiguity) portevent+=PortEventTrigger
	 *     portevent+=PortEventTrigger (ambiguity) transitionguard=TransitionGuard
	 *     portevent+=PortEventTrigger (ambiguity) transitionoperation=TransitionOperation
	 *     portevent+=PortEventTrigger (ambiguity) trigger+=Trigger
	 *     transitionguard=TransitionGuard (ambiguity) methodparameter+=MethodParameterTrigger
	 *     transitionguard=TransitionGuard (ambiguity) portevent+=PortEventTrigger
	 *     transitionguard=TransitionGuard (ambiguity) transitionguard=TransitionGuard
	 *     transitionguard=TransitionGuard (ambiguity) transitionoperation=TransitionOperation
	 *     transitionguard=TransitionGuard (ambiguity) trigger+=Trigger
	 *     transitionoperation=TransitionOperation (ambiguity) methodparameter+=MethodParameterTrigger
	 *     transitionoperation=TransitionOperation (ambiguity) portevent+=PortEventTrigger
	 *     transitionoperation=TransitionOperation (ambiguity) transitionguard=TransitionGuard
	 *     transitionoperation=TransitionOperation (ambiguity) transitionoperation=TransitionOperation
	 *     transitionoperation=TransitionOperation (ambiguity) trigger+=Trigger
	 *     trigger+=Trigger (ambiguity) methodparameter+=MethodParameterTrigger
	 *     trigger+=Trigger (ambiguity) portevent+=PortEventTrigger
	 *     trigger+=Trigger (ambiguity) transitionguard=TransitionGuard
	 *     trigger+=Trigger (ambiguity) transitionoperation=TransitionOperation
	 *     trigger+=Trigger (ambiguity) trigger+=Trigger
	 */
	protected void emit_TransitionBody_CommaKeyword_4_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('on' '*')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ','* (rule start)
	 *     (rule start) (ambiguity) ','+ methodparameter+=MethodParameterTrigger
	 *     (rule start) (ambiguity) ','+ portevent+=PortEventTrigger
	 *     (rule start) (ambiguity) ','+ transitionguard=TransitionGuard
	 *     (rule start) (ambiguity) ','+ transitionoperation=TransitionOperation
	 *     (rule start) (ambiguity) ','+ trigger+=Trigger
	 *     (rule start) (ambiguity) transitionguard=TransitionGuard
	 *     (rule start) (ambiguity) transitionoperation=TransitionOperation
	 */
	protected void emit_TransitionBody___OnKeyword_1_0_AsteriskKeyword_1_1_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
