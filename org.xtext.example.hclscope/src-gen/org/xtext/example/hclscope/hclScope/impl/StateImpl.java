/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.hclscope.hclScope.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.hclscope.hclScope.Choice;
import org.xtext.example.hclscope.hclScope.EntryAction;
import org.xtext.example.hclscope.hclScope.EntryPoint;
import org.xtext.example.hclscope.hclScope.ExitAction;
import org.xtext.example.hclscope.hclScope.ExitPoint;
import org.xtext.example.hclscope.hclScope.HclScopePackage;
import org.xtext.example.hclscope.hclScope.HistoryTransition;
import org.xtext.example.hclscope.hclScope.InitialTransition;
import org.xtext.example.hclscope.hclScope.InternalTransition;
import org.xtext.example.hclscope.hclScope.Junction;
import org.xtext.example.hclscope.hclScope.State;
import org.xtext.example.hclscope.hclScope.Transition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>State</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.hclscope.hclScope.impl.StateImpl#getInternaltransition <em>Internaltransition</em>}</li>
 *   <li>{@link org.xtext.example.hclscope.hclScope.impl.StateImpl#getEntryaction <em>Entryaction</em>}</li>
 *   <li>{@link org.xtext.example.hclscope.hclScope.impl.StateImpl#getExitaction <em>Exitaction</em>}</li>
 *   <li>{@link org.xtext.example.hclscope.hclScope.impl.StateImpl#getEntrypoint <em>Entrypoint</em>}</li>
 *   <li>{@link org.xtext.example.hclscope.hclScope.impl.StateImpl#getExitpoint <em>Exitpoint</em>}</li>
 *   <li>{@link org.xtext.example.hclscope.hclScope.impl.StateImpl#getStates <em>States</em>}</li>
 *   <li>{@link org.xtext.example.hclscope.hclScope.impl.StateImpl#getInitialtransition <em>Initialtransition</em>}</li>
 *   <li>{@link org.xtext.example.hclscope.hclScope.impl.StateImpl#getJunction <em>Junction</em>}</li>
 *   <li>{@link org.xtext.example.hclscope.hclScope.impl.StateImpl#getChoice <em>Choice</em>}</li>
 *   <li>{@link org.xtext.example.hclscope.hclScope.impl.StateImpl#getTransition <em>Transition</em>}</li>
 *   <li>{@link org.xtext.example.hclscope.hclScope.impl.StateImpl#getHistorytransition <em>Historytransition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StateImpl extends VertexImpl implements State
{
  /**
   * The cached value of the '{@link #getInternaltransition() <em>Internaltransition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInternaltransition()
   * @generated
   * @ordered
   */
  protected EList<InternalTransition> internaltransition;

  /**
   * The cached value of the '{@link #getEntryaction() <em>Entryaction</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntryaction()
   * @generated
   * @ordered
   */
  protected EList<EntryAction> entryaction;

  /**
   * The cached value of the '{@link #getExitaction() <em>Exitaction</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExitaction()
   * @generated
   * @ordered
   */
  protected EList<ExitAction> exitaction;

  /**
   * The cached value of the '{@link #getEntrypoint() <em>Entrypoint</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntrypoint()
   * @generated
   * @ordered
   */
  protected EList<EntryPoint> entrypoint;

  /**
   * The cached value of the '{@link #getExitpoint() <em>Exitpoint</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExitpoint()
   * @generated
   * @ordered
   */
  protected EList<ExitPoint> exitpoint;

  /**
   * The cached value of the '{@link #getStates() <em>States</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStates()
   * @generated
   * @ordered
   */
  protected EList<State> states;

  /**
   * The cached value of the '{@link #getInitialtransition() <em>Initialtransition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitialtransition()
   * @generated
   * @ordered
   */
  protected InitialTransition initialtransition;

  /**
   * The cached value of the '{@link #getJunction() <em>Junction</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunction()
   * @generated
   * @ordered
   */
  protected EList<Junction> junction;

  /**
   * The cached value of the '{@link #getChoice() <em>Choice</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChoice()
   * @generated
   * @ordered
   */
  protected EList<Choice> choice;

  /**
   * The cached value of the '{@link #getTransition() <em>Transition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransition()
   * @generated
   * @ordered
   */
  protected EList<Transition> transition;

  /**
   * The cached value of the '{@link #getHistorytransition() <em>Historytransition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHistorytransition()
   * @generated
   * @ordered
   */
  protected EList<HistoryTransition> historytransition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HclScopePackage.Literals.STATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InternalTransition> getInternaltransition()
  {
    if (internaltransition == null)
    {
      internaltransition = new EObjectContainmentEList<InternalTransition>(InternalTransition.class, this, HclScopePackage.STATE__INTERNALTRANSITION);
    }
    return internaltransition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EntryAction> getEntryaction()
  {
    if (entryaction == null)
    {
      entryaction = new EObjectContainmentEList<EntryAction>(EntryAction.class, this, HclScopePackage.STATE__ENTRYACTION);
    }
    return entryaction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ExitAction> getExitaction()
  {
    if (exitaction == null)
    {
      exitaction = new EObjectContainmentEList<ExitAction>(ExitAction.class, this, HclScopePackage.STATE__EXITACTION);
    }
    return exitaction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EntryPoint> getEntrypoint()
  {
    if (entrypoint == null)
    {
      entrypoint = new EObjectContainmentEList<EntryPoint>(EntryPoint.class, this, HclScopePackage.STATE__ENTRYPOINT);
    }
    return entrypoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ExitPoint> getExitpoint()
  {
    if (exitpoint == null)
    {
      exitpoint = new EObjectContainmentEList<ExitPoint>(ExitPoint.class, this, HclScopePackage.STATE__EXITPOINT);
    }
    return exitpoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<State> getStates()
  {
    if (states == null)
    {
      states = new EObjectContainmentEList<State>(State.class, this, HclScopePackage.STATE__STATES);
    }
    return states;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialTransition getInitialtransition()
  {
    return initialtransition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInitialtransition(InitialTransition newInitialtransition, NotificationChain msgs)
  {
    InitialTransition oldInitialtransition = initialtransition;
    initialtransition = newInitialtransition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, HclScopePackage.STATE__INITIALTRANSITION, oldInitialtransition, newInitialtransition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInitialtransition(InitialTransition newInitialtransition)
  {
    if (newInitialtransition != initialtransition)
    {
      NotificationChain msgs = null;
      if (initialtransition != null)
        msgs = ((InternalEObject)initialtransition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - HclScopePackage.STATE__INITIALTRANSITION, null, msgs);
      if (newInitialtransition != null)
        msgs = ((InternalEObject)newInitialtransition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - HclScopePackage.STATE__INITIALTRANSITION, null, msgs);
      msgs = basicSetInitialtransition(newInitialtransition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HclScopePackage.STATE__INITIALTRANSITION, newInitialtransition, newInitialtransition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Junction> getJunction()
  {
    if (junction == null)
    {
      junction = new EObjectContainmentEList<Junction>(Junction.class, this, HclScopePackage.STATE__JUNCTION);
    }
    return junction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Choice> getChoice()
  {
    if (choice == null)
    {
      choice = new EObjectContainmentEList<Choice>(Choice.class, this, HclScopePackage.STATE__CHOICE);
    }
    return choice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Transition> getTransition()
  {
    if (transition == null)
    {
      transition = new EObjectContainmentEList<Transition>(Transition.class, this, HclScopePackage.STATE__TRANSITION);
    }
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<HistoryTransition> getHistorytransition()
  {
    if (historytransition == null)
    {
      historytransition = new EObjectContainmentEList<HistoryTransition>(HistoryTransition.class, this, HclScopePackage.STATE__HISTORYTRANSITION);
    }
    return historytransition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case HclScopePackage.STATE__INTERNALTRANSITION:
        return ((InternalEList<?>)getInternaltransition()).basicRemove(otherEnd, msgs);
      case HclScopePackage.STATE__ENTRYACTION:
        return ((InternalEList<?>)getEntryaction()).basicRemove(otherEnd, msgs);
      case HclScopePackage.STATE__EXITACTION:
        return ((InternalEList<?>)getExitaction()).basicRemove(otherEnd, msgs);
      case HclScopePackage.STATE__ENTRYPOINT:
        return ((InternalEList<?>)getEntrypoint()).basicRemove(otherEnd, msgs);
      case HclScopePackage.STATE__EXITPOINT:
        return ((InternalEList<?>)getExitpoint()).basicRemove(otherEnd, msgs);
      case HclScopePackage.STATE__STATES:
        return ((InternalEList<?>)getStates()).basicRemove(otherEnd, msgs);
      case HclScopePackage.STATE__INITIALTRANSITION:
        return basicSetInitialtransition(null, msgs);
      case HclScopePackage.STATE__JUNCTION:
        return ((InternalEList<?>)getJunction()).basicRemove(otherEnd, msgs);
      case HclScopePackage.STATE__CHOICE:
        return ((InternalEList<?>)getChoice()).basicRemove(otherEnd, msgs);
      case HclScopePackage.STATE__TRANSITION:
        return ((InternalEList<?>)getTransition()).basicRemove(otherEnd, msgs);
      case HclScopePackage.STATE__HISTORYTRANSITION:
        return ((InternalEList<?>)getHistorytransition()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HclScopePackage.STATE__INTERNALTRANSITION:
        return getInternaltransition();
      case HclScopePackage.STATE__ENTRYACTION:
        return getEntryaction();
      case HclScopePackage.STATE__EXITACTION:
        return getExitaction();
      case HclScopePackage.STATE__ENTRYPOINT:
        return getEntrypoint();
      case HclScopePackage.STATE__EXITPOINT:
        return getExitpoint();
      case HclScopePackage.STATE__STATES:
        return getStates();
      case HclScopePackage.STATE__INITIALTRANSITION:
        return getInitialtransition();
      case HclScopePackage.STATE__JUNCTION:
        return getJunction();
      case HclScopePackage.STATE__CHOICE:
        return getChoice();
      case HclScopePackage.STATE__TRANSITION:
        return getTransition();
      case HclScopePackage.STATE__HISTORYTRANSITION:
        return getHistorytransition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HclScopePackage.STATE__INTERNALTRANSITION:
        getInternaltransition().clear();
        getInternaltransition().addAll((Collection<? extends InternalTransition>)newValue);
        return;
      case HclScopePackage.STATE__ENTRYACTION:
        getEntryaction().clear();
        getEntryaction().addAll((Collection<? extends EntryAction>)newValue);
        return;
      case HclScopePackage.STATE__EXITACTION:
        getExitaction().clear();
        getExitaction().addAll((Collection<? extends ExitAction>)newValue);
        return;
      case HclScopePackage.STATE__ENTRYPOINT:
        getEntrypoint().clear();
        getEntrypoint().addAll((Collection<? extends EntryPoint>)newValue);
        return;
      case HclScopePackage.STATE__EXITPOINT:
        getExitpoint().clear();
        getExitpoint().addAll((Collection<? extends ExitPoint>)newValue);
        return;
      case HclScopePackage.STATE__STATES:
        getStates().clear();
        getStates().addAll((Collection<? extends State>)newValue);
        return;
      case HclScopePackage.STATE__INITIALTRANSITION:
        setInitialtransition((InitialTransition)newValue);
        return;
      case HclScopePackage.STATE__JUNCTION:
        getJunction().clear();
        getJunction().addAll((Collection<? extends Junction>)newValue);
        return;
      case HclScopePackage.STATE__CHOICE:
        getChoice().clear();
        getChoice().addAll((Collection<? extends Choice>)newValue);
        return;
      case HclScopePackage.STATE__TRANSITION:
        getTransition().clear();
        getTransition().addAll((Collection<? extends Transition>)newValue);
        return;
      case HclScopePackage.STATE__HISTORYTRANSITION:
        getHistorytransition().clear();
        getHistorytransition().addAll((Collection<? extends HistoryTransition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HclScopePackage.STATE__INTERNALTRANSITION:
        getInternaltransition().clear();
        return;
      case HclScopePackage.STATE__ENTRYACTION:
        getEntryaction().clear();
        return;
      case HclScopePackage.STATE__EXITACTION:
        getExitaction().clear();
        return;
      case HclScopePackage.STATE__ENTRYPOINT:
        getEntrypoint().clear();
        return;
      case HclScopePackage.STATE__EXITPOINT:
        getExitpoint().clear();
        return;
      case HclScopePackage.STATE__STATES:
        getStates().clear();
        return;
      case HclScopePackage.STATE__INITIALTRANSITION:
        setInitialtransition((InitialTransition)null);
        return;
      case HclScopePackage.STATE__JUNCTION:
        getJunction().clear();
        return;
      case HclScopePackage.STATE__CHOICE:
        getChoice().clear();
        return;
      case HclScopePackage.STATE__TRANSITION:
        getTransition().clear();
        return;
      case HclScopePackage.STATE__HISTORYTRANSITION:
        getHistorytransition().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HclScopePackage.STATE__INTERNALTRANSITION:
        return internaltransition != null && !internaltransition.isEmpty();
      case HclScopePackage.STATE__ENTRYACTION:
        return entryaction != null && !entryaction.isEmpty();
      case HclScopePackage.STATE__EXITACTION:
        return exitaction != null && !exitaction.isEmpty();
      case HclScopePackage.STATE__ENTRYPOINT:
        return entrypoint != null && !entrypoint.isEmpty();
      case HclScopePackage.STATE__EXITPOINT:
        return exitpoint != null && !exitpoint.isEmpty();
      case HclScopePackage.STATE__STATES:
        return states != null && !states.isEmpty();
      case HclScopePackage.STATE__INITIALTRANSITION:
        return initialtransition != null;
      case HclScopePackage.STATE__JUNCTION:
        return junction != null && !junction.isEmpty();
      case HclScopePackage.STATE__CHOICE:
        return choice != null && !choice.isEmpty();
      case HclScopePackage.STATE__TRANSITION:
        return transition != null && !transition.isEmpty();
      case HclScopePackage.STATE__HISTORYTRANSITION:
        return historytransition != null && !historytransition.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //StateImpl
