// automatically generated by Xtext
grammar org.eclipse.papyrusrt.xtumlrt.xtext.Umlrt with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/papyrusrt/xtumlrt/common"
import "http://www.eclipse.org/papyrusrt/xtumlrt/interactions"
import "http://www.eclipse.org/papyrusrt/xtumlrt/statemach"
import "http://www.eclipse.org/papyrusrt/xtumlrt/statemachext"
import "http://www.eclipse.org/papyrusrt/xtumlrt/umlrt"
import "http://www.eclipse.org/uml2/5.0.0/UML" as uml


/**********/
/* Models */
/**********/

Model returns RTModel:
    {RTModel}
    'model'
    name=EString
    '{'
        ('description' description=EString ';')?
        (imports+=Import)*
        (   
            containedArtifacts+=Artifact
            | entities+=Entity
            | protocols+=Protocol
            | typeDefinitions+=TypeDefinition 
            | packages+=Package
            | interactions+=Interaction
        )*
    '}';

Import returns AbstractImport:
    'import' 'ns' {Import} importedNamespace=QualifiedName ('.*')?
    | 'import' 'uri' {URIImport} importURI=STRING
;

/************/
/* Packages */
/************/

Package returns Package:
    {Package}
    'package'
    name=EString
    '{'
//        DescriptionFragment
        (
            entities+=Entity
            | protocols+=Protocol
            | typeDefinitions+=TypeDefinition 
            | packages+=Package 
        )*
    '}'
;


/****************/
/* Enumerations */
/****************/

Enumeration returns Enumeration:
    {Enumeration}
    'enum'
    name=EString
    '{'
        DescriptionFragment
        (literals+=EnumerationLiteral ("," literals+=EnumerationLiteral)*)?
        ('default' defaultValue=[EnumerationLiteral|EString] ';')?
    '}'
;

EnumerationLiteral returns EnumerationLiteral:
    {EnumerationLiteral}
    name=EString
;


/************/
/* Entities */
/************/

Entity returns Entity:
    Capsule | RTPassiveClass
;

RTPassiveClass returns RTPassiveClass:
    {RTPassiveClass}
    'class'
    name=EString
    RedefinitionFragment
    DependencyFragment
    '{'
//        DescriptionFragment
        StructuredTypeCommonCoreFragment
//        BehaviourFragment
        AnnotationsFragment
    '}'
;

fragment StructuredTypeCommonCoreFragment returns StructuredType:
    (attributes+=Attribute)*
    (operations+=Operation)*
;

Attribute returns Attribute:
    (visibility=VisibilityKind)?
    (static?='static')?
    (readOnly?='readonly')?
    'attribute'
    name=EString
    ':' type=[Type|QualifiedName]
    ('[' upperBound=ValueSpecification ']')?
    ('=' default=ValueSpecification)?
    ';'
;

ValueSpecification returns ValueSpecification:
	Literal
;

Literal returns ValueSpecification:
	LiteralNull | LiteralBoolean | LiteralInteger | LiteralReal | LiteralString | LiteralUnlimitedNatural
;

LiteralNull returns LiteralNull:
	{LiteralNull}
	'null'
;

LiteralBoolean returns LiteralBoolean:
	{LiteralBoolean}
	value=BOOL
;

LiteralInteger returns LiteralInteger:
	{LiteralInteger}
	value=INT
;

LiteralReal returns LiteralReal:
	{LiteralReal}
	value=REAL
;

LiteralString returns LiteralString:
	{LiteralString}
	value=STRING
;

LiteralUnlimitedNatural returns LiteralUnlimitedNatural:
	LiteralNatural | LiteralUnimited
;

LiteralUnimited returns LiteralUnlimited:
	{LiteralUnlimited}
	ANY
;

LiteralNatural returns LiteralNatural:
	{LiteralNatural}
	value=NAT
;


Operation returns Operation:
    (visibility=VisibilityKind)?
    (static?='static')?
    (abstract?='abstract')?
    (query?='query')?
    'operation'
    name=EString
    ('(' (parameters+=Parameter)* ')')?
    ':' returnType=ReturnType
    body=OperationCode
;

OperationCode returns ActionCode:
	{ActionCode}
	source=ActionCodeSource
;

ActionCodeSource returns ecore::EString:
//	'{|' (ID | INT | STRING | ANY_OTHER)* '|}'
	'{' ACTION_CODE_SOURCE '}'
;

terminal ACTION_CODE_SOURCE returns ecore::EString:
	'|#' -> '#|'
;

Parameter returns Parameter:
    (direction=DirectionKind)?
    name=EString
    ':' type=[Type|QualifiedName]
    ('[' upperBound=ValueSpecification ']')?
;

ReturnType returns Parameter:
	{Parameter}
	type=[Type|QualifiedName]
	('[' upperBound=ValueSpecification ']')?;

Behaviour returns Behaviour:
    StateMachine | RTOpaqueBehaviour
;

fragment BehaviourFragment returns Entity:
    (behaviour=Behaviour)?
;



/************/
/* Capsules */
/************/

enum CapsuleKind returns CapsuleKind:
    FIXED='fixed' | OPTIONAL='optional' | PLUGIN='plugin'
;

enum PortKind returns PortKind:
    EXTERNAL='external' | INTERNAL='internal' | RELAY='relay' | SAP='sap' | SPP='spp'
;

enum PortRegistration returns PortRegistration:
    AUTOMATIC='auto' | APPLICATION='app' | AUTOMATICLOCKED='autolock'
;

Capsule returns Capsule:
    {Capsule}
    'capsule'
    name=EString
    RedefinitionFragment
    DependencyFragment
    '{'
//        DescriptionFragment
        (ports+=RTPort)*
        (parts+=CapsulePart)*
        (connectors+=Connector)*
        StructuredTypeCommonCoreFragment
        BehaviourFragment
        AnnotationsFragment
    '}'
;

RTPort returns RTPort:
    {RTPort}
    (conjugate?='conjugate')?
    (kind=PortKind)?
    (registration=PortRegistration)?
    'port'
    name=EString
    ProtocolReferenceFragment
    ('[' upperBound=ValueSpecification ']')?
    RedefinitionFragment
    ('regoverride' registrationOverride=EString)?
    ';'
;

CapsulePart returns CapsulePart:
    (kind=CapsuleKind)?
    'part'
    name=EString
    ':' type=[Capsule|QualifiedName]
    ('[' upperBound=ValueSpecification ']')?
    RedefinitionFragment
    ';'
;


Connector returns Connector:
    'connect' ends+=ConnectorEnd 'to' ends+=ConnectorEnd ';'
;

ConnectorEnd returns ConnectorEnd:
    (partWithPort=[CapsulePart|QualifiedName] ':')?
    role=[Port|ID]
;

/*************/
/* Protocols */
/*************/

enum ProtocolBehaviourFeatureKind returns ProtocolBehaviourFeatureKind:
    IN='in' | OUT='out' | INOUT='inout'
;

Protocol returns Protocol:
    {Protocol}
    'protocol'
    name=EString
    RedefinitionFragment
    '{'
//        DescriptionFragment
        (protocolBehaviourFeatures+=ProtocolBehaviourFeature)*
        AnnotationsFragment
    '}'
;

ProtocolBehaviourFeature returns ProtocolBehaviourFeature:
    Signal;

Signal returns Signal:
    {Signal}
    kind=ProtocolBehaviourFeatureKind
    'message'
    name=EString
    ('(' (parameters+=Parameter)* ')')?
    ';'
;

fragment ProtocolReferenceFragment returns RTPort:
    ':' type=[Protocol | QualifiedName]
    | ':' 'uml' type=[UMLProtocol | QualifiedName]
;

//UMLProtocol returns UMLProtocol:
//    'umlprotocol' collaboration=[uml::Collaboration | EString]
//;


/*************/
/* Artifacts */
/*************/

Artifact returns Artifact:
    {Artifact}
    'artifact'
    name=EString
    DependencyFragment
    '{'
        ('description' description=EString ';')?
        ('fileName' fileName=EString ';')?
        AnnotationsFragment
    '}'
;

fragment ArtifactsFragment returns NamedElement:
    (artifacts+=[Artifact|EString])*
;


/******************/
/* State machines */
/******************/

StateMachine returns StateMachine:
    'statemachine'
    top=StateMachineTop
;

StateMachineTop returns CompositeState:
    {CompositeState}
    '{'
        (initial=InitialPoint)?
        ('junction points' '{' junctionPoints+=JunctionPoint ("," junctionPoints+=JunctionPoint)* '}')?
        ('choice points' '{' choicePoints+=ChoicePoint ("," choicePoints+=ChoicePoint)* '}')?
        (substates+=State)*
        (transitions+=Transition)*
    '}'
;

/* States */

State returns State:
    CompositeState | SimpleState;

fragment StateCommonFragment returns State:
    DescriptionFragment
    ('entry action' entryAction=AbstractEntryAction (';')?)?
    ('exit action' exitAction=AbstractExitAction (';')?)?
    ('exit points' '{' exitPoints+=ExitPoint ("," exitPoints+=ExitPoint)* '}')?
    ('entry points' '{' entryPoints+=EntryPoint ("," entryPoints+=EntryPoint)* '}')?
;

SimpleState returns SimpleState:
    {SimpleState}
    'simple'? 'state'
    name=EString
    RedefinitionFragment
    ( ('{' StateCommonFragment  '}') | ';' )
;

CompositeState:
    'composite state'
    name=EString
    RedefinitionFragment
    (CompositeStateBody | ';')
;

fragment CompositeStateBody returns CompositeState:
    '{'
        StateCommonFragment
        (initial=InitialPoint)?
        (deepHistory=DeepHistory)?
        ('junction points' '{' junctionPoints+=JunctionPoint ("," junctionPoints+=JunctionPoint)* '}')?
        ('choice points' '{' choicePoints+=ChoicePoint ("," choicePoints+=ChoicePoint)* '}')?
        (substates+=State)*
        (transitions+=Transition)*
    '}'
;

/* Pseudostates */

InitialPoint returns InitialPoint:
    {InitialPoint}
    'initial' name=EString ';'
;

DeepHistory returns DeepHistory:
    {DeepHistory}
    'history' name=EString ';'
;

ChoicePoint returns ChoicePoint:
    {ChoicePoint}
    name=EString
;

JunctionPoint returns JunctionPoint:
    {JunctionPoint}
    name=EString
;

EntryPoint returns EntryPoint:
    {EntryPoint}
    name=EString
;

ExitPoint returns ExitPoint:
    {ExitPoint}
    name=EString
;

/* Transitions */

Transition returns Transition:
    'transition'
    (name=EString)?
    'from' sourceVertex=[Vertex|QualifiedName]
    'to' targetVertex=[Vertex|QualifiedName]
    (
        'triggers'
        (
            triggers+=Trigger
        |
            '{' triggers+=Trigger ("," triggers+=Trigger)* '}'
        )
    )?
    (guard=Guard)?
    (actionChain=TransitionActionChain)?
    RedefinitionFragment
    (';')?
;

Trigger returns Trigger:
    RTTrigger
;

RTTrigger returns RTTrigger:
    RTTriggerPMForm // | RTTriggerMPForm
;

fragment RTTriggerPortsFragment returns RTTrigger:
    (
        ports+=[RTPort|ID]
    |
        '{' ports+=[RTPort|ID] ("," ports+=[RTPort|ID])* '}'
    )
;


RTTriggerMPForm returns RTTrigger:
    {RTTrigger}
    'on' signal=[Signal|QualifiedName] 'from' RTTriggerPortsFragment
;

RTTriggerPMForm returns RTTrigger:
    {RTTrigger}
    'on' RTTriggerPortsFragment ':' signal=[Signal|QualifiedName]
;

Guard returns Guard:
    {Guard}
    'guard'
    (body=AbstractGuardAction)?
;

TransitionActionChain returns ActionChain:
    {ActionChain}
    'action' (actions+=AbstractTransitionAction)?
;

TransitionAction returns TransitionAction:
    {TransitionAction}
    source=ActionCodeSource
;

/* Actions */

AbstractEntryAction returns AbstractAction:
    EntryAction | ActionReference
;

AbstractExitAction returns AbstractAction:
    ExitAction | ActionReference
;

AbstractGuardAction returns AbstractAction:
	GuardAction | ActionReference
;

AbstractTransitionAction returns AbstractAction:
	TransitionAction | ActionReference
;

ActionReference returns ActionReference:
    {ActionReference}
    'actionref' (target=[AbstractAction|QualifiedName])?
;

EntryAction returns EntryAction:
    {EntryAction}
    source=ActionCodeSource
;

ExitAction returns ExitAction:
    {ExitAction}
    source=ActionCodeSource
;

GuardAction returns GuardAction:
	{GuardAction}
	source=ActionCodeSource	
;



/****************/
/* Interactions */
/****************/

Interaction returns Interaction:
	{Interaction}
	'interaction'
	name=EString
	RedefinitionFragment
	DependencyFragment
	'{'
		DescriptionFragment
		(lifelines+=Lifeline)*
		(fragments+=Fragment)*
		(messages+=Message)*
		AnnotationsFragment
	'}';

Lifeline returns Lifeline:
	{Lifeline}
	'lifeline'
	name=EString
	('for' LifelineRepresentsFragment)?
//	(LifelineBody | ';')
	';'
;

fragment LifelineRepresentsFragment returns Lifeline:
	'part' represents=[CapsulePart|QualifiedName] | 'attr' represents=[Attribute|QualifiedName]
;

fragment LifelineBody returns Lifeline:
	'{'
		( coveredBy+=[InteractionFragment] ( ';' coveredBy+=[InteractionFragment] )* )?
	'}'
;

Message returns Message:
	{Message}
	messageSort=MessageSort
	name=EString
	('=' MessageSignatureFragment)?
	'from' sendEvent=[MessageEnd]
	'to' receiveEvent=[MessageEnd]
	';'
;

enum MessageSort returns MessageSort:
	asynchCall='asynch call' | asynchSignal='async signal' | synchCall='synch call' | reply='reply' | createMessage='create' | deleteMessage='delete'
;

fragment MessageSignatureFragment returns Message:
	signature=[Signal|QualifiedName] //| signature=[Operation|QualifiedName]
;

Fragment returns InteractionFragment:
	OccurrenceSpecification //| ExecutionSpecification | StateInvariant 
;

OccurrenceSpecification returns OccurrenceSpecification:
	MessageOccurrenceSpecification // | ExecutionOccurrenceSpecification
;

MessageOccurrenceSpecification returns MessageOccurrenceSpecification:
	{MessageOccurrenceSpecification}
	'msg occurrence'
	name=EString
	'on'
	covered+=[Lifeline]
	';'
;



/********************/
/* Type definitions */
/********************/

Type returns Type:
    PrimitiveType | Enumeration | SimpleStructuredType | RTPassiveClass | Capsule | UserDefinedType | ExternalType
;

PrimitiveType returns PrimitiveType:
    {PrimitiveType}
    'primitivetype'
    name=EString
;

ExternalType returns ExternalType:
    {ExternalType}
    'externaltype'
    name=EString
    DependencyFragment
    '{'
        DescriptionFragment
        ArtifactsFragment
        AnnotationsFragment
    '}'
;

SimpleStructuredType returns StructuredType:
    {StructuredType}
    'struct'
    name=EString
    RedefinitionFragment
    DependencyFragment
    '{'
        DescriptionFragment
        StructuredTypeCommonCoreFragment
    '}'
;

TypeDefinition returns TypeDefinition:
    {TypeDefinition}
    'typedef' (type=Type)? ';'
;

UserDefinedType returns UserDefinedType:
    {UserDefinedType}
    'userdefinedtype'
    name=EString
    DependencyFragment
    '{'
        DescriptionFragment
        ('baseType' baseType=[Type|QualifiedName] ';')?
        ArtifactsFragment
        AnnotationsFragment
    '}'
;


/****************/
/* Common rules */
/****************/

BoundLiteral returns ecore::EString:
    STRING | ID | INT
;

EString returns ecore::EString:
    STRING | ID
;

QualifiedName:
    ID ('.' ID)*
;

enum DirectionKind returns DirectionKind:
    IN='in' | OUT='out' | IN_OUT='inout'
;

enum VisibilityKind returns VisibilityKind:
    PUBLIC='public' | PROTECTED='protected' | PRIVATE='private'
;

Annotation returns Annotation:
    {Annotation}
    'annotation'
    name=EString
    (
        '('
            (parameters+=AnnotationParameter (',' parameters+=AnnotationParameter)*)?
        ')'
    )?
    ';'
;

AnnotationParameter returns AnnotationParameter:
    {AnnotationParameter}
    name=EString ('=' value=EString)?
;

fragment AnnotationsFragment returns NamedElement:
    (annotations+=Annotation)*
;


Dependency returns Dependency:
    supplier=[NamedElement|QualifiedName]
;

fragment DependencyFragment returns NamedElement:
    ('dependencies' (dependencies+=Dependency (',' (dependencies+=Dependency)+))?)?
;


fragment DescriptionFragment returns NamedElement:
    ('description' description=EString ';')?
;

fragment RedefinitionFragment returns RedefinableElement:
    ('redefines' redefines=[RedefinableElement|QualifiedName])?
;


/***************/
/* Other rules */
/***************/

AnyEvent returns AnyEvent:
    {AnyEvent}
    ANY
;

Generalization returns Generalization:
    'extends' super=[StructuredType|QualifiedName]
;

RTOpaqueBehaviour returns RTOpaqueBehaviour:
    'behaviour'
    '{'
        ('init' initialization=EString)?
        ('handle' messageHandling=EString)?
        ('extras' extras=EString)?
    '}'
;

terminal BOOL returns ecore::EBoolean: 'true' | 'false';
terminal NAT returns ecore::EInt: ('0'..'9')+;
terminal REAL returns ecore::EDouble: ('-'|'+')?('0'..'9')+('.' ('0'..'9')+)?;
terminal ANY returns ecore::EString: '*';
