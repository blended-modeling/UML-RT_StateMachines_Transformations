module org.eclipse.papyrusrt.xtumlrt.xtext.Tumlrt

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var projectName = "org.eclipse.papyrusrt.xtumlrt.xtext"
var grammarURI = "platform:/resource/${projectName}/src/org/eclipse/papyrusrt/xtumlrt/xtext/Tumlrt.xtext"
var fileExtensions = "umlrt"
var generateXtendStub = true
//var workspaceDefault = "./source"   This should be the value for the workspace provided by the maven build
var workspaceDefault = "../../../.."
var workspace = "${workspaceDefault}"
var xtumlrtBaseDir = "${workspace}/plugins/xtumlrt"
var xtextBaseDir = "${xtumlrtBaseDir}/xtext"
var umlrtCodeGenDir = "${workspace}/plugins/umlrt/codegen"
var platformUri = xtumlrtBaseDir
var runtimeProject = "${xtextBaseDir}/${projectName}"

Workflow {
    bean = StandaloneSetup {
        // use an XtextResourceset throughout the process, which is able to resolve classpath:/ URIs.
        resourceSet = org.eclipse.xtext.resource.XtextResourceSet:theResourceSet {}
        scanClassPath  = true
        platformUri = "${platformUri}"
        uriMap = {
            from = "platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.genmodel"
            to = "platform:/resource/org.eclipse.emf.codegen.ecore/model/GenModel.genmodel"
        }
        uriMap = {
            from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.genmodel"
            to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
        }
        uriMap = {
            from = "platform:/plugin/org.eclipse.uml2.codegen.ecore/model/GenModel.genmodel"
            to = "platform:/resource/org.eclipse.uml2.codegen.ecore/model/GenModel.genmodel"
        }
        uriMap = {
            from = "platform:/plugin/org.eclipse.uml2.uml/model/UML.genmodel"
            to = "platform:/resource/org.eclipse.uml2.uml/model/UML.genmodel"
        }
        uriMap = {
            from = "platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore"
            to = "platform:/resource/org.eclipse.emf.codegen.ecore/model/GenModel.ecore"
        }
        uriMap = {
            from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore"
            to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore"
        }
        uriMap = {
            from = "platform:/plugin/org.eclipse.uml2.codegen.ecore/model/GenModel.ecore"
            to = "platform:/resource/org.eclipse.uml2.codegen.ecore/model/GenModel.ecore"
        }
        uriMap = {
            from = "platform:/plugin/org.eclipse.uml2.uml/model/UML.ecore"
            to = "platform:/resource/org.eclipse.uml2.uml/model/UML.ecore"
        }
        uriMap = {
            from = "platform:/plugin/org.eclipse.uml2.types/model/Types.genmodel"
            to = "platform:/resource/org.eclipse.uml2.types/model/Types.genmodel"
        }
        uriMap = {
            from = "platform:/plugin/org.eclipse.uml2.types/model/Types.ecore"
            to = "platform:/resource/org.eclipse.uml2.types/model/Types.ecore"
        }
        uriMap = {
            from = "platform:/resource/org.eclipse.papyrusrt.xtumlrt.common.model/"
            to = "${xtumlrtBaseDir}/metamodel/org.eclipse.papyrusrt.xtumlrt.common.model/"
        }
        uriMap = {
            from = "platform:/resource/org.eclipse.papyrusrt.xtumlrt.interactions.model/"
            to = "${xtumlrtBaseDir}/metamodel/org.eclipse.papyrusrt.xtumlrt.interactions.model/"
        }
        uriMap = {
            from = "platform:/resource/org.eclipse.papyrusrt.xtumlrt.statemach.model/"
            to = "${xtumlrtBaseDir}/metamodel/org.eclipse.papyrusrt.xtumlrt.statemach.model/"
        }
        uriMap = {
            from = "platform:/resource/org.eclipse.papyrusrt.xtumlrt.statemach.ext.model/"
            to = "${xtumlrtBaseDir}/metamodel/org.eclipse.papyrusrt.xtumlrt.statemach.ext.model/"
        }
        uriMap = {
            from = "platform:/resource/org.eclipse.papyrusrt.xtumlrt.umlrt.model/"
            to = "${xtumlrtBaseDir}/metamodel/org.eclipse.papyrusrt.xtumlrt.umlrt.model/"
        }
        registerGeneratedEPackage = "org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage"
        registerGeneratedEPackage = "org.eclipse.emf.ecore.EcorePackage"
        registerGeneratedEPackage = "org.eclipse.uml2.types.TypesPackage"
        registerGeneratedEPackage = "org.eclipse.uml2.codegen.ecore.genmodel.GenModelPackage"
        registerGeneratedEPackage = "org.eclipse.uml2.uml.UMLPackage"
        registerGeneratedEPackage = "org.eclipse.papyrusrt.xtumlrt.common.CommonPackage"
        registerGeneratedEPackage = "org.eclipse.papyrusrt.xtumlrt.interactions.InteractionsPackage"
        registerGeneratedEPackage = "org.eclipse.papyrusrt.xtumlrt.statemach.StatemachPackage"
        registerGeneratedEPackage = "org.eclipse.papyrusrt.xtumlrt.statemachext.StatemachextPackage"
        registerGeneratedEPackage = "org.eclipse.papyrusrt.xtumlrt.umlrt.UmlrtPackage"
        registerGenModelFile = "platform:/resource/org.eclipse.emf.codegen.ecore/model/GenModel.genmodel"
        registerGenModelFile = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
        registerGenModelFile = "platform:/resource/org.eclipse.uml2.types/model/Types.genmodel"
        registerGenModelFile = "platform:/resource/org.eclipse.uml2.codegen.ecore/model/GenModel.genmodel"
        registerGenModelFile = "platform:/resource/org.eclipse.uml2.uml/model/UML.genmodel"
        registerGenModelFile = "platform:/resource/org.eclipse.papyrusrt.xtumlrt.common.model/model/common.genmodel"
        registerGenModelFile = "platform:/resource/org.eclipse.papyrusrt.xtumlrt.interactions.model/model/interactions.genmodel"
        registerGenModelFile = "platform:/resource/org.eclipse.papyrusrt.xtumlrt.statemach.model/model/statemach.genmodel"
        registerGenModelFile = "platform:/resource/org.eclipse.papyrusrt.xtumlrt.statemach.ext.model/model/statemachext.genmodel"
        registerGenModelFile = "platform:/resource/org.eclipse.papyrusrt.xtumlrt.umlrt.model/model/umlrt.genmodel"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}.ui/src-gen"
    }

    component = Generator {
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
        pathTestProject = "${runtimeProject}.tests"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"
        language = auto-inject {
            forcedResourceSet = theResourceSet
            uri = grammarURI

            // Java API to access grammar elements (required by several other fragments)
            fragment = grammarAccess.GrammarAccessFragment auto-inject {}

            // generates Java API for the generated EPackages
            // fragment = ecore.EcoreGeneratorFragment auto-inject {}

            // the Ecore2Xtext specific terminal converter
            fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment auto-inject {}

            // serializer 2.0
            fragment = serializer.SerializerFragment auto-inject {
                //generateStub = false
            }

            // the old serialization component
            // fragment = parseTreeConstructor.ParseTreeConstructorFragment auto-inject {}

            // a custom ResourceFactory for use with EMF 
            fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

            // the Antlr parser
            fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
                options = {
                    classSplitting = true
                }
            }

            // Xtend-based API for validation 
            fragment = validation.ValidatorFragment auto-inject {
            // composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
            // composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }

            // old scoping and exporting API 
            // fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
            // fragment = exporting.QualifiedNamesFragment auto-inject {}

            // scoping and exporting API
            fragment = scoping.ImportURIScopingFragment auto-inject {}
            fragment = exporting.SimpleNamesFragment auto-inject {}
            fragment = builder.BuilderIntegrationFragment auto-inject {}

            // generator API
            fragment = generator.GeneratorFragment auto-inject {}

            // formatter API 
            fragment = formatting2.Formatter2Fragment auto-inject {}
            //fragment = ecore2xtext.FormatterFragment auto-inject {}

            // labeling API 
            fragment = labeling.LabelProviderFragment auto-inject {}

            // outline API 
            fragment = outline.OutlineTreeProviderFragment auto-inject {}
            fragment = outline.QuickOutlineFragment auto-inject {}

            // quickfix API
            fragment = quickfix.QuickfixProviderFragment auto-inject {}

            //content assist API 
            fragment = contentAssist.ContentAssistFragment auto-inject {}

            // antlr parser generator tailored for content assist 
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {
                options = {
                    classSplitting = true
                }
            }
            
            // generates junit test support classes into Generator#pathTestProject
            fragment = junit.Junit4Fragment auto-inject {}

            // project wizard (optional) 
            // fragment = projectWizard.SimpleProjectWizardFragment auto-inject {
            //      generatorProjectName = "${projectName}.generator" 
            // }

            // rename refactoring
            fragment = refactoring.RefactorElementNameFragment auto-inject {}

            // provides the necessary bindings for java types integration
            fragment = types.TypesGeneratorFragment auto-inject {}
            
            // generates the required bindings only if the grammar inherits from Xbase
            fragment = xbase.XbaseGeneratorFragment auto-inject {}
            
            // generates the required bindings only if the grammar inherits from Xtype
            fragment = xbase.XtypeGeneratorFragment auto-inject {}

            // provides a preference page for template proposals
            fragment = templates.CodetemplatesGeneratorFragment auto-inject {}

            // provides a compare view
            fragment = compare.CompareFragment auto-inject {}
        }
    }
}
